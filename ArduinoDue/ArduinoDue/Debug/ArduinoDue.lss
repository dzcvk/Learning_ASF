
ArduinoDue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004e0  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000428  20070000  000804e0  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000008c  20070428  00080908  00010428  2**2
                  ALLOC
  3 .stack        00002004  200704b4  00080994  00010428  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010428  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010451  2**0
                  CONTENTS, READONLY
  6 .debug_info   00004045  00000000  00000000  000104ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b7c  00000000  00000000  000144f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001cf3  00000000  00000000  0001506d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000410  00000000  00000000  00016d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000003c8  00000000  00000000  00017170  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00001f77  00000000  00000000  00017538  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00004e33  00000000  00000000  000194af  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005ea74  00000000  00000000  0001e2e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000930  00000000  00000000  0007cd58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	200724b8 	.word	0x200724b8
   80004:	00080255 	.word	0x00080255
   80008:	00080251 	.word	0x00080251
   8000c:	00080251 	.word	0x00080251
   80010:	00080251 	.word	0x00080251
   80014:	00080251 	.word	0x00080251
   80018:	00080251 	.word	0x00080251
	...
   8002c:	00080251 	.word	0x00080251
   80030:	00080251 	.word	0x00080251
   80034:	00000000 	.word	0x00000000
   80038:	00080251 	.word	0x00080251
   8003c:	00080251 	.word	0x00080251
   80040:	00080251 	.word	0x00080251
   80044:	00080251 	.word	0x00080251
   80048:	00080251 	.word	0x00080251
   8004c:	00080251 	.word	0x00080251
   80050:	00080251 	.word	0x00080251
   80054:	00080251 	.word	0x00080251
   80058:	00080251 	.word	0x00080251
   8005c:	00080251 	.word	0x00080251
   80060:	00080251 	.word	0x00080251
   80064:	00080251 	.word	0x00080251
   80068:	00000000 	.word	0x00000000
   8006c:	000801a9 	.word	0x000801a9
   80070:	000801bd 	.word	0x000801bd
   80074:	000801d1 	.word	0x000801d1
   80078:	000801e5 	.word	0x000801e5
	...
   80084:	00080251 	.word	0x00080251
   80088:	00080251 	.word	0x00080251
   8008c:	00080251 	.word	0x00080251
   80090:	00080251 	.word	0x00080251
   80094:	00080251 	.word	0x00080251
   80098:	00080251 	.word	0x00080251
   8009c:	00080251 	.word	0x00080251
   800a0:	00080251 	.word	0x00080251
   800a4:	00000000 	.word	0x00000000
   800a8:	00080251 	.word	0x00080251
   800ac:	00080251 	.word	0x00080251
   800b0:	00080251 	.word	0x00080251
   800b4:	00080251 	.word	0x00080251
   800b8:	00080251 	.word	0x00080251
   800bc:	00080251 	.word	0x00080251
   800c0:	00080251 	.word	0x00080251
   800c4:	00080251 	.word	0x00080251
   800c8:	00080251 	.word	0x00080251
   800cc:	00080251 	.word	0x00080251
   800d0:	00080251 	.word	0x00080251
   800d4:	00080251 	.word	0x00080251
   800d8:	00080251 	.word	0x00080251
   800dc:	00080251 	.word	0x00080251
   800e0:	00080251 	.word	0x00080251
   800e4:	00080251 	.word	0x00080251
   800e8:	00080251 	.word	0x00080251
   800ec:	00080251 	.word	0x00080251
   800f0:	00080251 	.word	0x00080251

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070428 	.word	0x20070428
   80110:	00000000 	.word	0x00000000
   80114:	000804e0 	.word	0x000804e0

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	000804e0 	.word	0x000804e0
   8013c:	2007042c 	.word	0x2007042c
   80140:	000804e0 	.word	0x000804e0
   80144:	00000000 	.word	0x00000000

00080148 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80148:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8014a:	4770      	bx	lr

0008014c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   8014c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8014e:	4770      	bx	lr

00080150 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80154:	4604      	mov	r4, r0
   80156:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80158:	4b10      	ldr	r3, [pc, #64]	; (8019c <pio_handler_process+0x4c>)
   8015a:	4798      	blx	r3
   8015c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   8015e:	4620      	mov	r0, r4
   80160:	4b0f      	ldr	r3, [pc, #60]	; (801a0 <pio_handler_process+0x50>)
   80162:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80164:	4005      	ands	r5, r0
   80166:	d017      	beq.n	80198 <pio_handler_process+0x48>
   80168:	4f0e      	ldr	r7, [pc, #56]	; (801a4 <pio_handler_process+0x54>)
   8016a:	f107 040c 	add.w	r4, r7, #12
   8016e:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80170:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   80174:	42b3      	cmp	r3, r6
   80176:	d10a      	bne.n	8018e <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80178:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8017c:	4229      	tst	r1, r5
   8017e:	d006      	beq.n	8018e <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80180:	6823      	ldr	r3, [r4, #0]
   80182:	4630      	mov	r0, r6
   80184:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80186:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8018a:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   8018e:	42bc      	cmp	r4, r7
   80190:	d002      	beq.n	80198 <pio_handler_process+0x48>
   80192:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80194:	2d00      	cmp	r5, #0
   80196:	d1eb      	bne.n	80170 <pio_handler_process+0x20>
   80198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8019c:	00080149 	.word	0x00080149
   801a0:	0008014d 	.word	0x0008014d
   801a4:	20070444 	.word	0x20070444

000801a8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   801a8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   801aa:	4802      	ldr	r0, [pc, #8]	; (801b4 <PIOA_Handler+0xc>)
   801ac:	210b      	movs	r1, #11
   801ae:	4b02      	ldr	r3, [pc, #8]	; (801b8 <PIOA_Handler+0x10>)
   801b0:	4798      	blx	r3
   801b2:	bd08      	pop	{r3, pc}
   801b4:	400e0e00 	.word	0x400e0e00
   801b8:	00080151 	.word	0x00080151

000801bc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   801bc:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   801be:	4802      	ldr	r0, [pc, #8]	; (801c8 <PIOB_Handler+0xc>)
   801c0:	210c      	movs	r1, #12
   801c2:	4b02      	ldr	r3, [pc, #8]	; (801cc <PIOB_Handler+0x10>)
   801c4:	4798      	blx	r3
   801c6:	bd08      	pop	{r3, pc}
   801c8:	400e1000 	.word	0x400e1000
   801cc:	00080151 	.word	0x00080151

000801d0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   801d0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   801d2:	4802      	ldr	r0, [pc, #8]	; (801dc <PIOC_Handler+0xc>)
   801d4:	210d      	movs	r1, #13
   801d6:	4b02      	ldr	r3, [pc, #8]	; (801e0 <PIOC_Handler+0x10>)
   801d8:	4798      	blx	r3
   801da:	bd08      	pop	{r3, pc}
   801dc:	400e1200 	.word	0x400e1200
   801e0:	00080151 	.word	0x00080151

000801e4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   801e4:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   801e6:	4802      	ldr	r0, [pc, #8]	; (801f0 <PIOD_Handler+0xc>)
   801e8:	210e      	movs	r1, #14
   801ea:	4b02      	ldr	r3, [pc, #8]	; (801f4 <PIOD_Handler+0x10>)
   801ec:	4798      	blx	r3
   801ee:	bd08      	pop	{r3, pc}
   801f0:	400e1400 	.word	0x400e1400
   801f4:	00080151 	.word	0x00080151

000801f8 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   801f8:	282c      	cmp	r0, #44	; 0x2c
   801fa:	d820      	bhi.n	8023e <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   801fc:	281f      	cmp	r0, #31
   801fe:	d80d      	bhi.n	8021c <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80200:	4b12      	ldr	r3, [pc, #72]	; (8024c <pmc_enable_periph_clk+0x54>)
   80202:	699a      	ldr	r2, [r3, #24]
   80204:	2301      	movs	r3, #1
   80206:	4083      	lsls	r3, r0
   80208:	401a      	ands	r2, r3
   8020a:	4293      	cmp	r3, r2
   8020c:	d019      	beq.n	80242 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   8020e:	2301      	movs	r3, #1
   80210:	fa03 f000 	lsl.w	r0, r3, r0
   80214:	4b0d      	ldr	r3, [pc, #52]	; (8024c <pmc_enable_periph_clk+0x54>)
   80216:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80218:	2000      	movs	r0, #0
   8021a:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8021c:	4b0b      	ldr	r3, [pc, #44]	; (8024c <pmc_enable_periph_clk+0x54>)
   8021e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
   80222:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80224:	2301      	movs	r3, #1
   80226:	4083      	lsls	r3, r0
   80228:	401a      	ands	r2, r3
   8022a:	4293      	cmp	r3, r2
   8022c:	d00b      	beq.n	80246 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   8022e:	2301      	movs	r3, #1
   80230:	fa03 f000 	lsl.w	r0, r3, r0
   80234:	4b05      	ldr	r3, [pc, #20]	; (8024c <pmc_enable_periph_clk+0x54>)
   80236:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   8023a:	2000      	movs	r0, #0
   8023c:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   8023e:	2001      	movs	r0, #1
   80240:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80242:	2000      	movs	r0, #0
   80244:	4770      	bx	lr
   80246:	2000      	movs	r0, #0
}
   80248:	4770      	bx	lr
   8024a:	bf00      	nop
   8024c:	400e0600 	.word	0x400e0600

00080250 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80250:	e7fe      	b.n	80250 <Dummy_Handler>
   80252:	bf00      	nop

00080254 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80254:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80256:	4b1e      	ldr	r3, [pc, #120]	; (802d0 <Reset_Handler+0x7c>)
   80258:	4a1e      	ldr	r2, [pc, #120]	; (802d4 <Reset_Handler+0x80>)
   8025a:	429a      	cmp	r2, r3
   8025c:	d003      	beq.n	80266 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   8025e:	4b1e      	ldr	r3, [pc, #120]	; (802d8 <Reset_Handler+0x84>)
   80260:	4a1b      	ldr	r2, [pc, #108]	; (802d0 <Reset_Handler+0x7c>)
   80262:	429a      	cmp	r2, r3
   80264:	d304      	bcc.n	80270 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80266:	4b1d      	ldr	r3, [pc, #116]	; (802dc <Reset_Handler+0x88>)
   80268:	4a1d      	ldr	r2, [pc, #116]	; (802e0 <Reset_Handler+0x8c>)
   8026a:	429a      	cmp	r2, r3
   8026c:	d30f      	bcc.n	8028e <Reset_Handler+0x3a>
   8026e:	e01a      	b.n	802a6 <Reset_Handler+0x52>
   80270:	4b1c      	ldr	r3, [pc, #112]	; (802e4 <Reset_Handler+0x90>)
   80272:	4c1d      	ldr	r4, [pc, #116]	; (802e8 <Reset_Handler+0x94>)
   80274:	1ae4      	subs	r4, r4, r3
   80276:	f024 0403 	bic.w	r4, r4, #3
   8027a:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   8027c:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   8027e:	4814      	ldr	r0, [pc, #80]	; (802d0 <Reset_Handler+0x7c>)
   80280:	4914      	ldr	r1, [pc, #80]	; (802d4 <Reset_Handler+0x80>)
   80282:	585a      	ldr	r2, [r3, r1]
   80284:	501a      	str	r2, [r3, r0]
   80286:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80288:	42a3      	cmp	r3, r4
   8028a:	d1fa      	bne.n	80282 <Reset_Handler+0x2e>
   8028c:	e7eb      	b.n	80266 <Reset_Handler+0x12>
   8028e:	4b17      	ldr	r3, [pc, #92]	; (802ec <Reset_Handler+0x98>)
   80290:	4917      	ldr	r1, [pc, #92]	; (802f0 <Reset_Handler+0x9c>)
   80292:	1ac9      	subs	r1, r1, r3
   80294:	f021 0103 	bic.w	r1, r1, #3
   80298:	1d1a      	adds	r2, r3, #4
   8029a:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   8029c:	2200      	movs	r2, #0
   8029e:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   802a2:	428b      	cmp	r3, r1
   802a4:	d1fb      	bne.n	8029e <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   802a6:	4a13      	ldr	r2, [pc, #76]	; (802f4 <Reset_Handler+0xa0>)
   802a8:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   802ac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   802b0:	4911      	ldr	r1, [pc, #68]	; (802f8 <Reset_Handler+0xa4>)
   802b2:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   802b4:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   802b8:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   802bc:	d203      	bcs.n	802c6 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   802be:	688a      	ldr	r2, [r1, #8]
   802c0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   802c4:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   802c6:	4b0d      	ldr	r3, [pc, #52]	; (802fc <Reset_Handler+0xa8>)
   802c8:	4798      	blx	r3

	/* Branch to main function */
	main();
   802ca:	4b0d      	ldr	r3, [pc, #52]	; (80300 <Reset_Handler+0xac>)
   802cc:	4798      	blx	r3
   802ce:	e7fe      	b.n	802ce <Reset_Handler+0x7a>
   802d0:	20070000 	.word	0x20070000
   802d4:	000804e0 	.word	0x000804e0
   802d8:	20070428 	.word	0x20070428
   802dc:	200704b4 	.word	0x200704b4
   802e0:	20070428 	.word	0x20070428
   802e4:	20070004 	.word	0x20070004
   802e8:	2007042b 	.word	0x2007042b
   802ec:	20070424 	.word	0x20070424
   802f0:	200704af 	.word	0x200704af
   802f4:	00080000 	.word	0x00080000
   802f8:	e000ed00 	.word	0xe000ed00
   802fc:	0008036d 	.word	0x0008036d
   80300:	00080319 	.word	0x00080319

00080304 <LED_Init>:
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80304:	4b03      	ldr	r3, [pc, #12]	; (80314 <LED_Init+0x10>)
   80306:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   8030a:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8030c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80310:	631a      	str	r2, [r3, #48]	; 0x30
   80312:	4770      	bx	lr
   80314:	400e1000 	.word	0x400e1000

00080318 <main>:

void LED_Init(void);
void WDT_Init(void);

int main (void)
{
   80318:	b508      	push	{r3, lr}
	ioport_set_pin_level(LED, IOPORT_PIN_LEVEL_HIGH);
}

void WDT_Init(void)
{
	REG_WDT_MR = WDT_MR_WDD(100)|WDT_MR_WDV(100);
   8031a:	f04f 1264 	mov.w	r2, #6553700	; 0x640064
   8031e:	4b0e      	ldr	r3, [pc, #56]	; (80358 <main+0x40>)
   80320:	601a      	str	r2, [r3, #0]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80322:	200b      	movs	r0, #11
   80324:	4c0d      	ldr	r4, [pc, #52]	; (8035c <main+0x44>)
   80326:	47a0      	blx	r4
   80328:	200c      	movs	r0, #12
   8032a:	47a0      	blx	r4
   8032c:	200d      	movs	r0, #13
   8032e:	47a0      	blx	r4
   80330:	200e      	movs	r0, #14
   80332:	47a0      	blx	r4
int main (void)
{
	/* Insert system clock initialization code here (sysclk_init()). */
	WDT_Init();
	ioport_init();
	LED_Init();
   80334:	4b0a      	ldr	r3, [pc, #40]	; (80360 <main+0x48>)
   80336:	4798      	blx	r3
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   80338:	490a      	ldr	r1, [pc, #40]	; (80364 <main+0x4c>)
		port->PIO_CODR = mask;
	} else {
		port->PIO_SODR = mask;
   8033a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
	/* Insert application code here, after the board has been initialized. */
	while(1)
	{
		ioport_toggle_pin_level(LED);
		while(!(REG_WDT_SR&WDT_SR_WDUNF));
   8033e:	4a0a      	ldr	r2, [pc, #40]	; (80368 <main+0x50>)
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   80340:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   80342:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
		port->PIO_CODR = mask;
   80346:	bf14      	ite	ne
   80348:	6348      	strne	r0, [r1, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   8034a:	6308      	streq	r0, [r1, #48]	; 0x30
   8034c:	6813      	ldr	r3, [r2, #0]
   8034e:	f013 0f01 	tst.w	r3, #1
   80352:	d0fb      	beq.n	8034c <main+0x34>
   80354:	e7f4      	b.n	80340 <main+0x28>
   80356:	bf00      	nop
   80358:	400e1a54 	.word	0x400e1a54
   8035c:	000801f9 	.word	0x000801f9
   80360:	00080305 	.word	0x00080305
   80364:	400e1000 	.word	0x400e1000
   80368:	400e1a58 	.word	0x400e1a58

0008036c <__libc_init_array>:
   8036c:	b570      	push	{r4, r5, r6, lr}
   8036e:	4e0f      	ldr	r6, [pc, #60]	; (803ac <__libc_init_array+0x40>)
   80370:	4d0f      	ldr	r5, [pc, #60]	; (803b0 <__libc_init_array+0x44>)
   80372:	1b76      	subs	r6, r6, r5
   80374:	10b6      	asrs	r6, r6, #2
   80376:	d007      	beq.n	80388 <__libc_init_array+0x1c>
   80378:	3d04      	subs	r5, #4
   8037a:	2400      	movs	r4, #0
   8037c:	3401      	adds	r4, #1
   8037e:	f855 3f04 	ldr.w	r3, [r5, #4]!
   80382:	4798      	blx	r3
   80384:	42a6      	cmp	r6, r4
   80386:	d1f9      	bne.n	8037c <__libc_init_array+0x10>
   80388:	4e0a      	ldr	r6, [pc, #40]	; (803b4 <__libc_init_array+0x48>)
   8038a:	4d0b      	ldr	r5, [pc, #44]	; (803b8 <__libc_init_array+0x4c>)
   8038c:	f000 f896 	bl	804bc <_init>
   80390:	1b76      	subs	r6, r6, r5
   80392:	10b6      	asrs	r6, r6, #2
   80394:	d008      	beq.n	803a8 <__libc_init_array+0x3c>
   80396:	3d04      	subs	r5, #4
   80398:	2400      	movs	r4, #0
   8039a:	3401      	adds	r4, #1
   8039c:	f855 3f04 	ldr.w	r3, [r5, #4]!
   803a0:	4798      	blx	r3
   803a2:	42a6      	cmp	r6, r4
   803a4:	d1f9      	bne.n	8039a <__libc_init_array+0x2e>
   803a6:	bd70      	pop	{r4, r5, r6, pc}
   803a8:	bd70      	pop	{r4, r5, r6, pc}
   803aa:	bf00      	nop
   803ac:	000804c8 	.word	0x000804c8
   803b0:	000804c8 	.word	0x000804c8
   803b4:	000804d0 	.word	0x000804d0
   803b8:	000804c8 	.word	0x000804c8

000803bc <register_fini>:
   803bc:	4b02      	ldr	r3, [pc, #8]	; (803c8 <register_fini+0xc>)
   803be:	b113      	cbz	r3, 803c6 <register_fini+0xa>
   803c0:	4802      	ldr	r0, [pc, #8]	; (803cc <register_fini+0x10>)
   803c2:	f000 b805 	b.w	803d0 <atexit>
   803c6:	4770      	bx	lr
   803c8:	00000000 	.word	0x00000000
   803cc:	000803dd 	.word	0x000803dd

000803d0 <atexit>:
   803d0:	4601      	mov	r1, r0
   803d2:	2000      	movs	r0, #0
   803d4:	4602      	mov	r2, r0
   803d6:	4603      	mov	r3, r0
   803d8:	f000 b818 	b.w	8040c <__register_exitproc>

000803dc <__libc_fini_array>:
   803dc:	b538      	push	{r3, r4, r5, lr}
   803de:	4d09      	ldr	r5, [pc, #36]	; (80404 <__libc_fini_array+0x28>)
   803e0:	4c09      	ldr	r4, [pc, #36]	; (80408 <__libc_fini_array+0x2c>)
   803e2:	1b64      	subs	r4, r4, r5
   803e4:	10a4      	asrs	r4, r4, #2
   803e6:	bf18      	it	ne
   803e8:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   803ec:	d005      	beq.n	803fa <__libc_fini_array+0x1e>
   803ee:	3c01      	subs	r4, #1
   803f0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   803f4:	4798      	blx	r3
   803f6:	2c00      	cmp	r4, #0
   803f8:	d1f9      	bne.n	803ee <__libc_fini_array+0x12>
   803fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   803fe:	f000 b867 	b.w	804d0 <_fini>
   80402:	bf00      	nop
   80404:	000804dc 	.word	0x000804dc
   80408:	000804e0 	.word	0x000804e0

0008040c <__register_exitproc>:
   8040c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8040e:	4c27      	ldr	r4, [pc, #156]	; (804ac <__register_exitproc+0xa0>)
   80410:	b085      	sub	sp, #20
   80412:	6826      	ldr	r6, [r4, #0]
   80414:	4607      	mov	r7, r0
   80416:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   8041a:	2c00      	cmp	r4, #0
   8041c:	d040      	beq.n	804a0 <__register_exitproc+0x94>
   8041e:	6865      	ldr	r5, [r4, #4]
   80420:	2d1f      	cmp	r5, #31
   80422:	dd1e      	ble.n	80462 <__register_exitproc+0x56>
   80424:	4822      	ldr	r0, [pc, #136]	; (804b0 <__register_exitproc+0xa4>)
   80426:	b918      	cbnz	r0, 80430 <__register_exitproc+0x24>
   80428:	f04f 30ff 	mov.w	r0, #4294967295
   8042c:	b005      	add	sp, #20
   8042e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80430:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80434:	9103      	str	r1, [sp, #12]
   80436:	9202      	str	r2, [sp, #8]
   80438:	9301      	str	r3, [sp, #4]
   8043a:	f3af 8000 	nop.w
   8043e:	9903      	ldr	r1, [sp, #12]
   80440:	4604      	mov	r4, r0
   80442:	9a02      	ldr	r2, [sp, #8]
   80444:	9b01      	ldr	r3, [sp, #4]
   80446:	2800      	cmp	r0, #0
   80448:	d0ee      	beq.n	80428 <__register_exitproc+0x1c>
   8044a:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   8044e:	2000      	movs	r0, #0
   80450:	6025      	str	r5, [r4, #0]
   80452:	6060      	str	r0, [r4, #4]
   80454:	4605      	mov	r5, r0
   80456:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   8045a:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   8045e:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   80462:	b93f      	cbnz	r7, 80474 <__register_exitproc+0x68>
   80464:	1c6b      	adds	r3, r5, #1
   80466:	2000      	movs	r0, #0
   80468:	3502      	adds	r5, #2
   8046a:	6063      	str	r3, [r4, #4]
   8046c:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   80470:	b005      	add	sp, #20
   80472:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80474:	2601      	movs	r6, #1
   80476:	40ae      	lsls	r6, r5
   80478:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   8047c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   80480:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   80484:	2f02      	cmp	r7, #2
   80486:	ea42 0206 	orr.w	r2, r2, r6
   8048a:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   8048e:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   80492:	d1e7      	bne.n	80464 <__register_exitproc+0x58>
   80494:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   80498:	431e      	orrs	r6, r3
   8049a:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   8049e:	e7e1      	b.n	80464 <__register_exitproc+0x58>
   804a0:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   804a4:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   804a8:	e7b9      	b.n	8041e <__register_exitproc+0x12>
   804aa:	bf00      	nop
   804ac:	000804b8 	.word	0x000804b8
   804b0:	00000000 	.word	0x00000000
   804b4:	00000043 	.word	0x00000043

000804b8 <_global_impure_ptr>:
   804b8:	20070000                                ... 

000804bc <_init>:
   804bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   804be:	bf00      	nop
   804c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   804c2:	bc08      	pop	{r3}
   804c4:	469e      	mov	lr, r3
   804c6:	4770      	bx	lr

000804c8 <__init_array_start>:
   804c8:	000803bd 	.word	0x000803bd

000804cc <__frame_dummy_init_array_entry>:
   804cc:	00080119                                ....

000804d0 <_fini>:
   804d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   804d2:	bf00      	nop
   804d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   804d6:	bc08      	pop	{r3}
   804d8:	469e      	mov	lr, r3
   804da:	4770      	bx	lr

000804dc <__fini_array_start>:
   804dc:	000800f5 	.word	0x000800f5
